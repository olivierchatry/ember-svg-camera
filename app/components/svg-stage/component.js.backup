import Ember from 'ember';

const randFloat = (min, max) => Math.random() * (max - min) + min;

export default Ember.Component.extend({
	tagName:"g",
	attributeBindings:["transform"],
	zoom:1000,
	zoomSpeed:0,
	center:{x:10000000, y:10000000},
	keyDown(event) {
		switch ( event.keyCode ) {
			case 38: /*up*/
			case 87: /*W*/ this.zoomSpeed = 100; break;

			case 40: /*down*/
			case 83: /*S*/ this.zoomSpeed = -100; break;
		}
	},
	keyUp(event) {
		switch ( event.keyCode ) {
			case 38: /*up*/
			case 87: /*W*/ this.zoomSpeed = 0; break;

			case 40: /*down*/
			case 83: /*S*/ this.zoomSpeed = 0; break;
		}
	},
	onDidInsertElement:Ember.on("didInsertElement", function() {
		let previous = performance.now()
		$(window).on('keyup', (event) => this.keyUp(event))
		$(window).on('keydown', (event) => this.keyDown(event))
		const fct = () => {
			const timestamp = performance.now()
			const delta =  (timestamp - previous) / 1000.0
			previous = timestamp

			this.zoom += this.zoomSpeed * delta

			this.camera.setProperties({
				x1:-this.zoom + this.center.x,
				y1:-this.zoom + this.center.y,
				x2: this.zoom + this.center.x,
				y2: this.zoom + this.center.y
			})
			this.updateMatrix()
			//  setTimeout(fct.bind(this), 100)
			window.requestAnimationFrame(fct.bind(this))
		}
		// setTimeout(fct.bind(this), 100)
		window.requestAnimationFrame(fct.bind(this))
	}),
	images:Ember.computed(function() {
		const images = []
		// for (let i = 0; i < 1000; ++i) {
		// 	const d = 10000
		// 	const image = {
		// 		x:randFloat(10000000 - d, 10000000 + d),
		// 		y:randFloat(10000000 - d, 10000000 + d),
		// 		w:30,
		// 		h:50
		// 	}
		// 	images.push(image)
		// }
		const d = 0;
		const image = {
			x:randFloat(10000000 - d, 10000000 + d),
			y:randFloat(10000000 - d, 10000000 + d),
			w:30,
			h:50
		}
		images.push(image)
		return images
	}),
	updateMatrix() {
		const {x, y}				 = this.get("camera.center")
		let 	{x1, x2, y1, y2} = this.get("camera.viewWithRatio");
		x1 -= x, y1 -= y, x2 -= x, y2 -= y
		const transform = `matrix(${2 / (x2 - x1)} 0 0 ${2 / (y2 - y1)} ${-(x2 + x1) / (x2 - x1)} ${-(y2 + y1) / (y2 - y1)})`
		this.element.setAttributeNS(null,"transform", transform)
		this.updateList.forEach(a => a(x, y, this.camera.viewWidth / (x2 - x1), this.camera.viewHeight / (y2 - y1)))
	}
	// transformObserver:Ember.observer("camera.viewWithRatio.{x1,y1,x2,y2}", function() {
	// 	this.updateMatrix()
	// })
});
